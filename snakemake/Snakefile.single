import sys
from os.path import join

INDEX = config["index"]
INPUT_DIR = config["input_path"]
OUTPUT_DIR = config["output_path"]
SALMON_PATH = config["salmon"].format(sys.platform)
NUM_THREADS = str(config["num_threads"])
EXPR_TYPE = config["exprtype"]
SAMPLES_FQ = glob_wildcards(join(INPUT_DIR, "{sample}.fastq")).sample
SAMPLES_GZ = glob_wildcards(join(INPUT_DIR, "{sample}.fastq.gz")).sample

rule all:
    input:
        join(OUTPUT_DIR,"EXPR.csv")

rule run_salmon_fq:
    input:
        idx = INDEX,
        r = join(INPUT_DIR,"{sample_fq}.fastq")
    
    output:
        join(OUTPUT_DIR,"{sample_fq}")

    shell:
        SALMON_PATH + " quant -i {input.idx} -l A -r {input.r} -o {output} -p " + NUM_THREADS


rule run_salmon_gz:
    input:
        idx = INDEX,
        r = join(INPUT_DIR,"{sample_gz}.fastq.gz")
    
    output:
        join(OUTPUT_DIR,"{sample_gz}")

    shell:
        SALMON_PATH + " quant -i {input.idx} -l A -r {input.r} -o {output} -p " + NUM_THREADS


rule collect_abundance:
    input:
        expand(join(OUTPUT_DIR,"{sample_fq}"), sample_fq = SAMPLES_FQ) +
        expand(join(OUTPUT_DIR,"{sample_gz}"), sample_gz = SAMPLES_GZ) 

    output:
        join(OUTPUT_DIR,"EXPR.csv")
    run:
        def get_abundance(fname):
            from collections import defaultdict
            abundance = defaultdict( float )
            with open(fname, "r") as inp:
                line = inp.readline()
                for line in inp:
                    line = line.strip().split()
                    name = line[0]
                    abundance[name] += float(line[3]) if EXPR_TYPE is "TPM" else float(line[-1])

            return abundance

        tb = dict()
        for file in input:
            file = join(file, "quant.sf")
            sid = file.split("/")[-2]
            tb[sid] = get_abundance(file)

        import pandas as pd
        with open(str(output), "w") as oup:
            oup.write(pd.DataFrame(tb).to_csv(sep=",", index_label="TE"))
